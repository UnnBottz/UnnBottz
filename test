g_ui.loadUIFromString([[

hpPanel < Panel
  margin: 5
  layout:
    type: verticalBox

PainelWindow < MainWindow
  !text: tr('Painel criado por UnnBottz')
  color: lightGray
  size: 175 820
  @onEscape: self:hide()

  TabBar
    id: paTabBar
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 0


  Panel
    id: paImagem
    anchors.top: paTabBar.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    image-source: /data/images/ui/x_x2
    image-border: 9





  Button
    id: closeButton
    !text: tr('Close')
    font: cipsoftFont
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
    margin-top: 7
    margin-right: 1    

]])


local PainelPanelName = "listt"
  local ui = setupUI([[
Panel
  height: 16
  width: 250

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 130
    !text: tr('Auto Dungeon')
    color: lightGray
    font: verdana-11px-rounded

  Button
    id: editcombo
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 5
    height: 16
    text: Editar
    font: verdana-11px-rounded

]], parent)


ui.title:setOn(storage.PainelPanelName)
modules.game_textmessage.displayGameMessage("Auto Dungeon (Script) criado por: UnnBottz.                                             Script Carregado...")
  ui.title.onClick = function(widget)
    storage.PainelPanelName = not  storage.PainelPanelName
    ui.title:setOn(storage.PainelPanelName)
    print("Boss:", storage.PainelPanelName)
  end

  ui:setId(PaineltroPanelName)

  if not storage[PainelPanelName] then
    storage[PainelPanelName] = { 

    }
  end

rootWidget = g_ui.getRootWidget()
if rootWidget then
    PainelsWindow = UI.createWidget('PainelWindow', rootWidget)
    PainelsWindow:hide()
    TabBar = PainelsWindow.paTabBar
    TabBar:setContentWidget(PainelsWindow.paImagem)
   for v = 1, 1 do





hpPanel = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel2 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel2:setId("2") -- sets ID

hpPanel3 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel4 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel5 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel6 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel7 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

TabBar:addTab("PvP UnnBottz", hpPanel)
TabBar:addTab("Extra Zz", hpPanel2)


end
end



  PainelsWindow.closeButton.onClick = function(widget)
    PainelsWindow:hide()
  end


  
ui.editcombo.onClick = function(widget)
    PainelsWindow:show()
    PainelsWindow:raise()
    PainelsWindow:focus()
  end


------------------------------------------------------------------------------------------------------------------------------


addButton("Enviar STOP", "STOP", function()
  if not storage.PainelPanelName then return end
    local partyChannelId = getChannelId("party")  -- Obtém o ID do canal de party

    if partyChannelId and storage.autoTradeMessage:len() > 0 then    
        sayChannel(partyChannelId, "stop")  -- Envia "stop" para o canal de party
    else
        modules.game_textmessage.displayBroadcastMessage("Você não está em um canal de party.")
    end
end, hpPanel)

---------------------

addButton("Maker Party", "Maker Party", function()
  if not storage.PainelPanelName then return end
   say("0800")
end, hpPanel)

--------------------------



local m_main = macro(10000, function() end)
if not storage.PainelPanelName then return end
onTalk(function(name, level, mode, text, channelId, pos)

    if m_main.isOff() then return end
    if text:lower() == "0800" then
        local c = getCreatureByName(name)  -- Obtém o jogador pelo nome
        if c then
            -- Aceita o convite para a party
            g_game.partyJoin(c:getId())
        end
    end
end, hpPanel)

-----------------

local ui = setupUI([[
mwfrenteBox < CheckBox
  font: cipsoftFont
  margin-top: 5
  margin-left: 5
  anchors.top: prev.bottom
  anchors.left: parent.left
  anchors.right: parent.right
  color: lightGray

Panel
  height: 20

  mwfrenteBox
    id: ligarmwfrente
    anchors.top: parent.top
    text: MW Alvo
    color: white
    !tooltip: tr('Vai usar mw na frente do alvo')
    font: small-9px

]], hpPanel)

local st = "mwfrenteFight"
storage[st] = storage[st] or {
  enabled = false,
  ligarmwfrente = true,
}
local config = storage[st]

ui.ligarmwfrente:setOn(config.enabled)
ui.ligarmwfrente:setChecked(config.ligarmwfrente)

-- Evento para alternar o estado de ativação e cor do widget
ui.ligarmwfrente.onClick = function(widget)
  config.enabled = not config.enabled
  config.ligarmwfrente = not config.ligarmwfrente
  widget:setOn(config.enabled)
  widget:setChecked(config.ligarmwfrente)
  widget:setImageColor(config.ligarmwfrente and "lightGray" or "red")
end
ui.ligarmwfrente:setImageColor(config.ligarmwfrente and "lightGray" or "red")


local mwallId = 3180 
local squaresThreshold = 2 
playerMw = macro(200, function()
if not ui.ligarmwfrente:isChecked() then return end
local target = g_game.getAttackingCreature()
      if target then
local targetPos = target:getPosition()
local targetDir = target:getDirection()
local mwallTile
      if targetDir == 0 then -- north
        targetPos.y = targetPos.y - squaresThreshold
        mwallTile = g_map.getTile(targetPos)
        useWith(mwallId, mwallTile:getTopUseThing())
      elseif targetDir == 1 then -- east
        targetPos.x = targetPos.x + squaresThreshold
        mwallTile = g_map.getTile(targetPos)
        useWith(mwallId, mwallTile:getTopUseThing())
      elseif targetDir == 2 then -- south
        targetPos.y = targetPos.y + squaresThreshold
        mwallTile = g_map.getTile(targetPos)
        useWith(mwallId, mwallTile:getTopUseThing())
      elseif targetDir == 3 then -- west
        targetPos.x = targetPos.x - squaresThreshold
        mwallTile = g_map.getTile(targetPos)
        useWith(mwallId, mwallTile:getTopUseThing())
      end
   end
end)

----------

--macro(100, function()
 --for _,lu in ipairs(getSpectators(posz())) do
  --if lu:isPlayer() and lu:getShield() == 4 then
  -- lu:setOutfit({type = 6})
  --end
-- end
--end, hpPanel)

-------------


local ui = setupUI([[
mwcostasBox < CheckBox
  font: cipsoftFont
  margin-top: 5
  margin-left: 5
  anchors.top: prev.bottom
  anchors.left: parent.left
  anchors.right: parent.right
  color: lightGray

Panel
  height: 20

  mwcostasBox
    id: ligarmwcostas
    anchors.top: parent.top
    text: MW Costas
    color: white
    !tooltip: tr('Vai usar mw aonde o personagem estava')
    font: small-9px

]], hpPanel)

local st = "mwcostasFight"
storage[st] = storage[st] or {
  enabled = false,
  ligarmwcostas = true,
}
local config = storage[st]

ui.ligarmwcostas:setOn(config.enabled)
ui.ligarmwcostas:setChecked(config.ligarmwcostas)

-- Evento para alternar o estado de ativação e cor do widget
ui.ligarmwcostas.onClick = function(widget)
  config.enabled = not config.enabled
  config.ligarmwcostas = not config.ligarmwcostas
  widget:setOn(config.enabled)
  widget:setChecked(config.ligarmwcostas)
  widget:setImageColor(config.ligarmwcostas and "lightGray" or "red")
end
ui.ligarmwcostas:setImageColor(config.ligarmwcostas and "lightGray" or "red")


local mw = macro(100,function() end)
if not ui.ligarmwcostas:isChecked() then return end
onPlayerPositionChange(function(newPos, oldPos)
    if oldPos.z ~= posz() then return end
    if oldPos then
        local tile = g_map.getTile(oldPos)
        if mw.isOn() and tile:isWalkable() then
            useWith(3180, tile:getTopUseThing())
        end
    end
end)

--------------------

local ui = setupUI([[
oldtargetBox < CheckBox
  font: cipsoftFont
  margin-top: 5
  margin-left: 5
  anchors.top: prev.bottom
  anchors.left: parent.left
  anchors.right: parent.right
  color: lightGray

Panel
  height: 20

  oldtargetBox
    id: ligaroldtargt
    anchors.top: parent.top
    text: Hold Target
    color: white
    !tooltip: tr('Vai travar o target no inimigo')
    font: small-9px
]], hpPanel)
local st = "oldtargtFight"
storage[st] = storage[st] or {
  enabled = false,
  ligaroldtargt = true,
}
local config = storage[st]

ui.ligaroldtargt:setOn(config.enabled)
ui.ligaroldtargt:setChecked(config.ligaroldtargt)

-- Evento de clique para ativar/desativar o widget
ui.ligaroldtargt.onClick = function(widget)
  config.enabled = not config.enabled
  config.ligaroldtargt = not config.ligaroldtargt
  widget:setOn(config.enabled)
  widget:setChecked(config.ligaroldtargt)
  widget:setImageColor(config.ligaroldtargt and "lightGray" or "red")
end

-- Define a cor do widget com base no estado inicial
ui.ligaroldtargt:setImageColor(config.ligaroldtargt and "lightGray" or "red")

local oldTarget = nil

-- Macro para manter o alvo antigo
oldtarget = macro(100, function()
  if not ui.ligaroldtargt:isChecked() then return end
  
  if g_game.isAttacking() then
    oldTarget = g_game.getAttackingCreature()
  end
  
  if oldTarget and oldTarget:getPosition() then
    local targetPos = oldTarget:getPosition()
    
    -- Verifica se não estamos atacando e se o alvo está a uma distância de 8
    if not g_game.isAttacking() and getDistanceBetween(pos(), targetPos) <= 8 then
      -- Verifica se o alvo está no mesmo nível z (mesmo andar)
      if targetPos.z == posz() then
        -- Ataque o alvo antigo
        g_game.attack(oldTarget)
      end
    end
  end
end)

-- Evento de tecla para cancelar o ataque
onKeyDown(function(keys)
  if keys == "Escape" then
    -- Redefine o alvo antigo e cancela o ataque
    oldTarget = nil
    g_game.cancelAttack()
  end
end)

-----------
UI.Separator(hpPanel)
config = {
  enabled = true,          
  pushMaxKey = "PageUp", 
  pushDelay = 1000,        
  pushMaxRuneId = 3148,   
  mwallBlockId = 2129    
}

local fieldTable = {2118, 105, 2122}
local cleanTile = nil
local targetTile
local pushTarget
local hold = 0

-- Reseta os dados
local resetData = function()
  for _, tile in pairs(g_map.getTiles(posz())) do
    if tile:getText() == "TARGET" or tile:getText() == "DEST" or tile:getText() == "CLEAR" then
      tile:setText('')
    end
  end
  pushTarget = nil
  targetTile = nil
  cleanTile = nil
end

-- Obtém criatura por ID
local getCreatureById = function(id)
  for _, spec in ipairs(getSpectators()) do
    if spec:getId() == id then
      return spec
    end
  end
  return false
end

-- Verifica se o tile contém campos indesejados
local isNotOk = function(tile)
  local tileItems = {}
  for _, item in ipairs(tile:getItems()) do
    table.insert(tileItems, item:getId())
  end
  for _, field in ipairs(fieldTable) do
    if table.find(tileItems, field) then
      return true -- Tile contém um campo indesejado
    end
  end
  return false -- Tile é aceitável
end

-- Verifica se dois tiles estão próximos
local isOk = function(a, b)
  return getDistanceBetween(a, b) == 1
end

-- Evento ao pressionar a tecla
onKeyDown(function(keys)
  if not config.enabled or keys ~= config.pushMaxKey then return end
  
  hold = now
  local tile = getTileUnderCursor()
  if not tile then return end
  
  if pushTarget and targetTile then
    resetData()
    return
  end
  
  local creature = tile:getCreatures()[1]
  if not pushTarget and creature then
    pushTarget = creature
    tile:setText('TARGET')
    pushTarget:setMarked('#00FF00')
  elseif not targetTile and pushTarget then
    if pushTarget and getDistanceBetween(tile:getPosition(), pushTarget:getPosition()) ~= 1 then
      resetData()
      return
    else
      tile:setText('DEST')
      targetTile = tile
    end
  end
end)

-- Evento ao pressionar a tecla para marcar o tile
onKeyPress(function(keys)
  if not config.enabled or keys ~= config.pushMaxKey then return end
  
  local tile = getTileUnderCursor()
  if not tile then return end
  
  if (hold - now) < -2500 then
    if cleanTile and tile ~= cleanTile then
      resetData()
    elseif not cleanTile then
      cleanTile = tile
      tile:setText("CLEAR")
    end
  end
  hold = 0
end)

-- Evento de mudança de posição da criatura
onCreaturePositionChange(function(creature, newPos, oldPos)
  if not config.enabled then return end
  if creature == player then resetData() end
  if not pushTarget or not targetTile then return end
  if creature == pushTarget and newPos == targetTile then resetData() end
end)

-- Macro principal
macro(50, "Ganhar MagicWall", function()
  if not config.enabled then return end

  local pushDelay = tonumber(config.pushDelay)
  local rune = tonumber(config.pushMaxRuneId)
  local customMwall = config.mwallBlockId

  if cleanTile then
    local tilePos = cleanTile:getPosition()
    local pPos = player:getPosition()
    if not isOk(tilePos, pPos) then
      resetData()
      return
    end

    if not cleanTile:hasCreature() then return end
    local tiles = getNearTiles(tilePos)
    local destTile
    local forbidden = {}

    -- Loop para identificar tiles proibidos (escadas)
    for _, tile in pairs(tiles) do
      local minimapColor = g_map.getMinimapColor(tile:getPosition())
      local stairs = (minimapColor >= 210 and minimapColor <= 213)
      if stairs then
        table.insert(forbidden, tile:getPosition())
      end
    end

    -- Encontrar um tile de destino
    for _, tile in pairs(tiles) do
      if tile:isWalkable() and not isNotOk(tile) and not tile:hasCreature() and not table.find(forbidden, tile:getPosition()) then
        destTile = tile
        break
      end
    end

    if not destTile then return end
    local parcel = cleanTile:getCreatures()[1]
    if parcel then
      g_game.move(parcel, destTile:getPosition())
      delay(2000)
    end
  else
    if not pushTarget or not targetTile then return end
    local tilePos = targetTile:getPosition()
    local targetPos = pushTarget:getPosition()
    if not isOk(tilePos, targetPos) then return end
    
    local tileOfTarget = g_map.getTile(targetPos)

    if not targetTile:isWalkable() then
      local topThing = targetTile:getTopUseThing():getId()
      if topThing == 2129 or topThing == 2130 or topThing == customMwall then
        if targetTile:getTimer() < pushDelay + 500 then
          vBot.isUsing = true
          schedule(pushDelay + 700, function() vBot.isUsing = false end)
        end
        if targetTile:getTimer() > pushDelay then return end
      else
        return resetData()
      end
    end

    if not tileOfTarget:getTopUseThing():isNotMoveable() and targetTile:getTimer() < pushDelay + 500 then
      return useWith(rune, pushTarget)
    end
    if isNotOk(targetTile) then
      if targetTile:canShoot() then
        return useWith(3148, targetTile:getTopUseThing())
      else
        return
      end
    end
    g_game.move(pushTarget, tilePos)
    delay(2000)
  end
end, hpPanel)

-----------------------------------

addButton("Enviar Fallow", "FalloW", function()
  if not storage.PainelPanelName then return end
    local partyChannelId = getChannelId("party")  -- Obtém o ID do canal de party

    if partyChannelId and storage.autoTradeMessage:len() > 0 then    
        sayChannel(partyChannelId, "Venha Maker")
    else
        modules.game_textmessage.displayBroadcastMessage("Você não está em um canal de party.")
    end
end, hpPanel)


------------------------------------

addButton("Enviar Stop Fallow", "Stop FalloW", function()
  if not storage.PainelPanelName then return end
    local partyChannelId = getChannelId("party")  -- Obtém o ID do canal de party

    if partyChannelId and storage.autoTradeMessage:len() > 0 then    
        sayChannel(partyChannelId, "Pare Maker")
    else
        modules.game_textmessage.displayBroadcastMessage("Você não está em um canal de party.")
    end
end, hpPanel)

------------------------------------


local ui = setupUI([[
FallowBox < CheckBox
  font: cipsoftFont
  margin-top: 5
  margin-left: 5
  anchors.top: prev.bottom
  anchors.left: parent.left
  anchors.right: parent.right
  color: lightGray

Panel
  height: 20

  FallowBox
    id: ligarFallow
    anchors.top: parent.top
    text: Fallow
    color: white
    !tooltip: tr('Vai da alto fallow caso mandem fallow no chat')
    font: small-9px
]], hpPanel)

local st = "FallowFight"
storage[st] = storage[st] or {
  enabled = false,
  ligarFallow = true,
}
local config = storage[st]

ui.ligarFallow:setOn(config.enabled)
ui.ligarFallow:setChecked(config.ligarFallow)

ui.ligarFallow.onClick = function(widget)
  config.enabled = not config.enabled
  config.ligarFallow = not config.ligarFallow
  widget:setOn(config.enabled)
  widget:setChecked(config.ligarFallow)
  widget:setImageColor(config.ligarFallow and "lightGray" or "red")
end

ui.ligarFallow:setImageColor(config.ligarFallow and "lightGray" or "red")

addLabel("Label", "Follow Name", hpPanel2)
addTextEdit("TxtEdit", storage.fName or "name", function(widget, text)
  storage.fName = text:lower()
end, hpPanel2)

local lastPos = nil
local isFollowing = false  -- Variável para controlar o estado de seguir
macro(200, function()  
  if not ui.ligarFallow:isChecked() then return end
  local leader = getCreatureByName(storage.fName)
  if leader then
    if isFollowing then  -- Seguir apenas se isFollowing for true
      if not g_game.getFollowingCreature() then
        return g_game.follow(leader)  -- Seguir o líder
      end
    end
  elseif lastPos then
    player:autoWalk(lastPos)  -- Caminhar para a última posição conhecida se não estiver seguindo
  end
end, hpPanel)

onCreaturePositionChange(function(creature, newPos, oldPos)
  local leader = getCreatureByName(storage.fName)
  if leader ~= creature or not newPos then return end
  lastPos = newPos
end)

-- Evento para escutar mensagens no chat
onTalk(function(name, level, mode, text, channelId, pos)
    if not ui.ligarFallow:isChecked() then return end  -- Verifica se o checkbox está ativado
    if text:lower() == "venha maker" then  -- Verifica se a mensagem é "fallow"
        local leader = getCreatureByName(storage.fName)  -- Obtém o jogador pelo nome
        if leader then
            isFollowing = true  -- Ativa a flag de seguir
            g_game.follow(leader)  -- Seguir o líder
        end
    elseif text:lower() == "pare maker" then  -- Verifica se a mensagem é "cancell fallow"
        isFollowing = false  -- Reseta a flag se a mensagem "cancell fallow" for recebida
        g_game.cancelFollow()  -- Para de seguir o líder
    end
end, hpPanel)

--------------------

addButton("Enviar FireBomb", "FireBomb", function()
  if not storage.PainelPanelName then return end
    local partyChannelId = getChannelId("party")  -- Obtém o ID do canal de party

    if partyChannelId and storage.autoTradeMessage:len() > 0 then    
        sayChannel(partyChannelId, "firebomb")  -- Envia "stop" para o canal de party
    else
        modules.game_textmessage.displayBroadcastMessage("Você não está em um canal de party.")
    end
end, hpPanel)
EnergyBomb = macro(500, function()

  onTalk(function(name, level, mode, text, channelId, pos)
      if text then
          print("Texto recebido: " .. text)  -- Mensagem de depuração

          -- Verifica se o texto recebido é "energy"
          if text:lower() == "firebomb" then
              print("Usando a runa de Energy Bomb")  -- Mensagem de depuração
              if useWith(3192, player) then
                  print("Runa usada com sucesso.")  -- Confirma que a runa foi usada
              else
                  print("Falha ao usar a runa.")  -- Indica falha no uso
              end
          end
      else
          print("Texto é nil")  -- Mensagem de depuração se o texto for nulo
      end
  end)
end)


-------------

addButton("Enviar energy", "Energy", function()
  if not storage.PainelPanelName then return end
    local partyChannelId = getChannelId("party")  -- Obtém o ID do canal de party

    if partyChannelId and storage.autoTradeMessage:len() > 0 then    
        sayChannel(partyChannelId, "energy")  -- Envia "stop" para o canal de party
    else
        modules.game_textmessage.displayBroadcastMessage("Você não está em um canal de party.")
    end
end, hpPanel)
EnergyBomb = macro(500, function()

  onTalk(function(name, level, mode, text, channelId, pos)
      if text then
          print("Texto recebido: " .. text)  -- Mensagem de depuração

          -- Verifica se o texto recebido é "energy"
          if text:lower() == "energy" then
              print("Usando a runa de Energy Bomb")  -- Mensagem de depuração
              if useWith(3149, player) then
                  print("Runa usada com sucesso.")  -- Confirma que a runa foi usada
              else
                  print("Falha ao usar a runa.")  -- Indica falha no uso
              end
          end
      else
          print("Texto é nil")  -- Mensagem de depuração se o texto for nulo
      end
  end)
end)




-------------

addButton("Enviar Poison", "Poison", function()
  if not storage.PainelPanelName then return end
    local partyChannelId = getChannelId("party")  -- Obtém o ID do canal de party

    if partyChannelId and storage.autoTradeMessage:len() > 0 then    
        sayChannel(partyChannelId, "poison")  -- Envia "stop" para o canal de party
    else
        modules.game_textmessage.displayBroadcastMessage("Você não está em um canal de party.")
    end
end, hpPanel)
EnergyBomb = macro(500, function()

  onTalk(function(name, level, mode, text, channelId, pos)
      if text then
          print("Texto recebido: " .. text)  -- Mensagem de depuração

          -- Verifica se o texto recebido é "energy"
          if text:lower() == "poison" then
              print("Usando a runa de Energy Bomb")  -- Mensagem de depuração
              if useWith(3173, player) then
                  print("Runa usada com sucesso.")  -- Confirma que a runa foi usada
              else
                  print("Falha ao usar a runa.")  -- Indica falha no uso
              end
          end
      else
          print("Texto é nil")  -- Mensagem de depuração se o texto for nulo
      end
  end)
end)







